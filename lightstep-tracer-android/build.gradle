// This sets up the dependencies for the build script *itself*, not the package.
buildscript {
    // Work around a defect in the 'android-library' plugin's version check
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven'
apply plugin: 'signing'

group = "com.lightstep.tracer"
project.version = current_version

def siteUrl = 'https://github.com/lightstep/lightstep-tracer-java'
def gitUrl = 'https://github.com/lightstep/lightstep-tracer-java.git'

android {
    compileSdkVersion 18
    buildToolsVersion "22.0.1"
    resourcePrefix "lightstep__"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 2
        versionName version
    }

    buildTypes {
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    compileOptions {
        targetCompatibility = '1.7'
        sourceCompatibility = '1.7'
    }
}

Properties properties = new Properties()

// TODO: Figure out whether we need this after moving
// to publishing directly to Sonatype (this section
// is essentially duplicate)
install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                name 'The LightStep OpenTracing Implementation for Android'
                description = 'The LightStep OpenTracing Tracer implementation for Android'
                url siteUrl

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id 'lightstep'
                        name 'LightStep'
                        email 'hello@lightstep.com'
                    }
                }
                scm {
                    connection 'https://github.com/lightstep/lightstep-tracer-android'
                    developerConnection 'https://github.com/lightstep/lightstep-tracer-android'
                    url 'https://github.com/lightstep/lightstep-tracer-android'
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: System.getenv("SONATYPE_USERNAME"), password: System.getenv("SONATYPE_PASSWORD"))
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: System.getenv("SONATYPE_USERNAME"), password: System.getenv("SONATYPE_PASSWORD"))
      }

      pom.project {
        packaging 'aar'

        name 'The LightStep OpenTracing Implementation for Android'
        description = 'The LightStep OpenTracing Tracer implementation for Android'
        url siteUrl

        licenses {
            license {
                name 'MIT'
                url 'https://opensource.org/licenses/MIT'
            }
        }
        developers {
            developer {
                id 'lightstep'
                name 'LightStep'
                email 'hello@lightstep.com'
            }
        }
        scm {
            connection 'https://github.com/lightstep/lightstep-tracer-android'
            developerConnection 'https://github.com/lightstep/lightstep-tracer-android'
            url 'https://github.com/lightstep/lightstep-tracer-android'
        }
      }
    }
  }
}

dependencies {
    compile "com.lightstep.tracer:common-with-okhttp:${lightStepTracerVersion}"
}

task sourcesJar(type: Jar) {
    from {
        android.sourceSets.main.java.srcDirs
        configurations.compile.collect { it.isDirectory()? it : zipTree(it) }
    }
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        def id = System.getenv("GPG_KEY_NAME")
        if (id == null) {
            logger.error("GPG_KEY_NAME was not found")
        } else if (id.length() < 8) {
            logger.error("GPG_KEY_NAME is too short, length is " + id.length())
        }

        id = id.substring(id.length()-8)
        def file = "/home/circleci/.gpg-lightstep/secring.gpg"
        def password = ""

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }
    }
}

signing {
    sign configurations.archives
}

task findConventions << {
    println project.getConvention()
}
